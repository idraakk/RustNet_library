# --------------------------- Cargo.toml (Project Manifest) ---------------------------
# This file tells Cargo (Rust's package manager & build system) how to build the project.
# It declares the package metadata, the Rust edition, dependencies, crate type, etc.

[package]
name = "rust_net"              # Crate name. Also becomes the Python module name via #[pymodule] rust_net
version = "0.1.0"              # Semantic version of the library.
edition = "2021"               # Rust 2021 edition enables modern language features and idioms.

[dependencies]
# ndarray provides N-dimensional arrays (similar to NumPy arrays).
# We enable "serde" so arrays can be serialized/deserialized (used for save/load of the model).
ndarray = { version = "0.15", features = ["serde"] }

# rand is used for random initialization of weights.
rand = "0.8"

# serde is Rust's serialization framework; "derive" auto-implements Serialize/Deserialize on structs.
serde = { version = "1.0", features = ["derive"] }

# serde_json lets us read/write JSON files (used for model checkpointing).
serde_json = "1.0"

# csv library for CSV reading/writing (used by data helpers and training artifacts).
csv = "1.1"

# pyo3 is the Python FFI layer that exposes Rust types/functions to Python.
# The "extension-module" feature builds a Python extension module (.pyd/.so) instead of a normal lib.
pyo3 = { version = "0.18", features = ["extension-module"] }

[lib]
# The crate builds as a C-compatible dynamic library (cdylib), required for Python extension modules.
# The module entrypoint in src/lib.rs is #[pymodule] fn rust_net(...), which exports "rust_net" to Python.
crate-type = ["cdylib"]
# ------------------------------------------------------------------------------------
